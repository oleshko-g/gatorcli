// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO
    feeds (
        id,
        created_at,
        updated_at,
        name,
        url,
        user_id
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, created_at, updated_at, name, url, user_id
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.NullUUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH
    cte_inserted_feed_follow AS (
        INSERT INTO
            feed_follows (
                id,
                created_at,
                updated_at,
                user_id,
                feed_url
            )
        VALUES ($1, $2, $3, $4, $5)
    )
SELECT feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.feed_url, feed_follows.user_id, users.id, users.created_at, users.updated_at, users.name, feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id
FROM
    feed_follows
    JOIN users ON feed_follows.user_id = users.id
    JOIN feeds ON feed_follows.feed_url = feeds.url
    WHERE feeds.id = $1
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedUrl   sql.NullString
}

type CreateFeedFollowRow struct {
	FeedFollow FeedFollow
	User       User
	Feed       Feed
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedUrl,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.FeedFollow.ID,
		&i.FeedFollow.CreatedAt,
		&i.FeedFollow.UpdatedAt,
		&i.FeedFollow.FeedUrl,
		&i.FeedFollow.UserID,
		&i.User.ID,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Name,
		&i.Feed.ID,
		&i.Feed.CreatedAt,
		&i.Feed.UpdatedAt,
		&i.Feed.Name,
		&i.Feed.Url,
		&i.Feed.UserID,
	)
	return i, err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedsUsers = `-- name: GetFeedsUsers :many
SELECT
    feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id,
    users.id, users.created_at, users.updated_at, users.name
FROM feeds
    JOIN users ON feeds.user_id = users.id
`

type GetFeedsUsersRow struct {
	Feed Feed
	User User
}

func (q *Queries) GetFeedsUsers(ctx context.Context) ([]GetFeedsUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsUsersRow
	for rows.Next() {
		var i GetFeedsUsersRow
		if err := rows.Scan(
			&i.Feed.ID,
			&i.Feed.CreatedAt,
			&i.Feed.UpdatedAt,
			&i.Feed.Name,
			&i.Feed.Url,
			&i.Feed.UserID,
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const upsertPosts = `-- name: UpsertPosts :many
INSERT INTO
    posts
SELECT p.p
FROM UNNEST($1::public.posts[]) AS p
ON CONFLICT (url) DO NOTHING
RETURNING
    id, created_at, updated_at, title, url, description, published_at, feed_id
`

func (q *Queries) UpsertPosts(ctx context.Context, dollar_1 []interface{}) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, upsertPosts, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
